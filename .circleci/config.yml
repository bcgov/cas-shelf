version: 2.1

orbs:
  redhat-openshift: circleci/redhat-openshift@0.2.0
  orb-tools: circleci/orb-tools@8.27.4
  gcp-gcr: circleci/gcp-gcr@0.7.1
  shellcheck: circleci/shellcheck@1.3.15

executors:
  shellcheck:
    docker:
      - image: "koalaman/shellcheck-alpine:v0.7.0"
  ruby:
    docker:
      - image: "circleci/ruby:2.6.4"

jobs:
  tools:
    machine:
      image: ubuntu-1604:201903-01
    working_directory: ~/cas-shelf
    steps:
      - checkout:
          path: ~/cas-shelf
      - restore_cache:
          name: Restore asdf Tools Cache
          keys:
            - tool-versions-{{ checksum ".tool-versions" }}-v2
      - run:
          name: Install tools via asdf
          command: |
            [[ -d ~/.asdf ]] || git clone https://github.com/asdf-vm/asdf.git ~/.asdf --branch v0.7.4
            pushd ~/.asdf && git checkout v0.7.4 && popd
            echo -e '\n. $HOME/.asdf/asdf.sh' >> ~/.bashrc
            echo -e '\nexport BASH_ENV="~/.asdf/asdf.sh"' >> ~/.bashrc
            source ~/.bashrc
            make install_asdf_tools
      - save_cache:
          name: Save asdf Tools Cache
          key: tool-versions-{{ checksum ".tool-versions" }}-v2
          paths:
            - ~/.asdf
      - persist_to_workspace:
          root: ~/
          paths:
            - .asdf
            - .bashrc
            - cas-shelf

  unit:
    machine:
      image: ubuntu-1604:201903-01
    working_directory: ~/cas-shelf
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Run Terratest & Nodejs tests
          command: |
            source ~/.asdf/asdf.sh
            make setup
            make dep
            make terratest
            make nodejs_test
            make destroy
          working_directory: ~/cas-shelf/tests
      - orb-tools/install-bats
      - run:
          name: "Pull Submodules"
          command: |
            git submodule update --init
      - run:
          name: Run Bats tests
          command: |
            make test

  build_and_push:
    executor: gcp-gcr/default
    parameters:
      image_tag:
        type: string
      cache_version:
        type: integer
        default: 2
    steps:
      - checkout
      - gcp-gcr/gcr-auth
      - restore_cache:
          keys:
            - v<< parameters.cache_version>>-cas-shelf-{{ .Branch }}
          paths:
            - /tmp/cas-shelf.tar
      - run:
          name: Load cache
          command: |
            set +o pipefail
            docker load -i /tmp/cas-shelf.tar | true
      - run:
          name: Log in to DockerHub
          command: echo $DOCKERHUB_PASSWORD | docker login -u $DOCKERHUB_USER --password-stdin registry.hub.docker.com
      - run:
          name: Build application Docker image
          command: |
            docker build --cache-from=cas-shelf -t cas-shelf:latest -t gcr.io/${GOOGLE_PROJECT_ID}/cas-shelf:<< parameters.image_tag >> .
      - run:
          name: Save Docker image layer cache
          command: |
            docker save -o /tmp/cas-shelf.tar cas-shelf:latest
      - save_cache:
          key: v<< parameters.cache_version>>-cas-shelf-{{ .Branch }}-{{ epoch }}
          paths:
            - /tmp/cas-shelf.tar
      - gcp-gcr/push-image:
          image: cas-shelf
          tag: << parameters.image_tag >>
          digest-path: /tmp/digest.txt
      - run:
          command: |
            echo "Digest is: $(</tmp/digest.txt)"

workflows:
  version: 2
  test_and_deploy:
    jobs:
      - shellcheck/check:
          pattern: "*.bats"
          executor: "shellcheck"
          filters:
            tags:
              only: /.*/
      - tools:
          requires:
            - shellcheck/check
          filters:
            tags:
              only: /.*/
      - unit:
          requires:
            - tools
          filters:
            tags:
              only: /.*/
      - build_and_push:
          name: build_and_push_sha1
          image_tag: ${CIRCLE_SHA1}
          context: cas-pipeline
          requires:
            - unit
      - build_and_push:
          name: build_and_push_tag
          image_tag: ${CIRCLE_TAG/v/}
          context: cas-pipeline
          requires:
            - unit
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
